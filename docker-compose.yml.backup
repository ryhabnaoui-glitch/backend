services:
  web:
    build: .
    ports:
      - "0.0.0.0:8001:8000"
    volumes:
      - .:/app
      - /var/run/docker.sock:/var/run/docker.sock
      - ./blockchain/contracts:/app/blockchain/contracts
      - ./blockchain/build:/app/blockchain/build
    command: bash -c "
      echo 'Waiting for services...' &&
      sleep 60 &&
      python manage.py migrate &&
      python manage.py runserver 0.0.0.0:8000"
    env_file:
      - .env
    environment:
      - CORE_PEER_TLS_ENABLED=false
      - CORE_PEER_LOCALMSPID=Org1MSP
      - CORE_PEER_ADDRESS=peer0.org1.example.com:7051
      - ORDERER_ADDRESS=orderer.example.com:7050
      - CHANNEL_NAME=mychannel
      - CHAINCODE_NAME=voting
    depends_on:
      db:
        condition: service_healthy
      fabric-network:
        condition: service_started
    networks:
      - fabric_test

  db:
    image: postgres:13-alpine
    environment:
      POSTGRES_USER: ${DB_USER:-voting_user}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-voting_password}
      POSTGRES_DB: ${DB_NAME:-voting_db}
    volumes:
      - postgres_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U ${DB_USER:-voting_user} -d ${DB_NAME:-voting_db}"]
      interval: 5s
      timeout: 5s
      retries: 5
    networks:
      - fabric_test

  ipfs:
    image: ipfs/go-ipfs:v0.23.0
    ports:
      - "0.0.0.0:4001:4001"
      - "0.0.0.0:5001:5001"  
      - "0.0.0.0:8080:8080"
    volumes:
      - ipfs_data:/data/ipfs
    networks:
      - fabric_test

  ganache:
    image: trufflesuite/ganache-cli:v6.12.2
    ports:
      - "0.0.0.0:8545:8545"
    command: >
      ganache-cli
      --host 0.0.0.0
      --port 8545
      --accounts 50
      --defaultBalanceEther 1000
      --mnemonic "vote chain blockchain election system demo test network development environment"
      --networkId 1337
      --gasLimit 10000000
      --gasPrice 1000000000
      --verbose
      --deterministic
    networks:
      - fabric_test
    restart: unless-stopped

  fabric-network:
    image: alpine:latest
    hostname: fabric-network
    command: >
      sh -c "
        apk add --no-cache netcat-openbsd &&
        echo 'Mock Hyperledger Fabric Network Starting...' &&
        echo 'Orderer listening on port 7050' &&
        echo 'Peer0.Org1 listening on port 7051' &&
        echo 'Peer0.Org2 listening on port 9051' &&
        nc -l -p 7050 &
        nc -l -p 7051 &
        nc -l -p 9051 &
        echo 'All Fabric endpoints ready' &&
        tail -f /dev/null
      "
    ports:
      - "7050:7050"
      - "7051:7051" 
      - "9051:9051"
    networks:
      fabric_test:
        aliases:
          - orderer.example.com
          - peer0.org1.example.com
          - peer0.org2.example.com

volumes:
  postgres_data:
  ipfs_data:

networks:
  fabric_test:
    driver: bridge